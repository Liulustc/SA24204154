## 生成数据的真实参数
real_ac <- function(dm, dv) {
set.seed(223)
n <- 1000
K <- 4
# 生成真实的 alpha, mu, sigma
real_alpha <- simulation_alpha(n, K)
real_mu <- simulation_mu(n, K, dm)
real_sigma <- simulation_sigma(n, K, dv)
c <- simulation_c(n, K, real_alpha)
A <- simulation_A(n, real_mu, real_sigma, c)
list(
alpha = real_alpha,
mu = real_mu,
sigma = real_sigma,
c = c,
A = A
)
}
main <- function(dm, dv) {
n <- 1000
K <- 4
real <- real_ac(dm, dv)
c <- real$c
A <- real$A
alpha <- initial_alpha(K)
mu <- initial_mu(K)
sigma <- initial_sigma(K)
tau <- initial_tau(n, K)
for (w in 1:10) {
alpha <- update_alpha(K, tau)
mu <- update_mu(n, K, tau, A)
sigma <- update_sigma(n, K, tau, A, mu)
tau <- update_tau(n, K, dv, tau, A, alpha, mu, sigma)
}
es_c <- get_es_c(n, tau)
return(es_c)
}
real <- real_ac(0.5, 0.5)
c <- real$c
esc <- main(0.5, 0.5)
error(1000, c, esc)
devtools::install_github("wkl122/SA24204163")
install.packages("fftw", dependencies = TRUE)
install.packages("fftw", type='binary')
devtools::install_github("wkl122/SA24204163")
devtools::install_github("wkl122/SA24204163")
library("SA24204163")
changepoint(rnorm(100), 10, 1)
browseVignettes("SA24204163")
vignette(package = "SA24204163")
devtools::install_github("wkl122/SA24204163")
packageVersion("SA24204163")
devtools::install_github("wkl122/SA24204163", force = TRUE)
browseVignettes("SA24204163")
vignette(package = "SA24204163")
system.file(package = "SA24204163")
devtools::install_github("wkl122/SA24204163", build_vignettes = TRUE, force=T)
devtools::install_github("wkl122/SA24204163")
vignette(package = "SA24204163")
library(MASS)
## 得到模拟数据的真实参数real_parameter
simulation_alpha <- function(n, K) {
real_alpha <- rep(1 / K, K)
return(real_alpha)
}
simulation_mu <- function(n, K, dm) {
real_mu <- matrix(0, nrow = K, ncol = K)
for (i in seq(1, K)) {
real_mu[i, i] <- runif(1, -dm, dm)
for (j in seq(i+1, K)) {
if (j < (K+1)){
real_mu[i, j] <- runif(1, -dm, dm)
real_mu[j, i] <- real_mu[i, j]
}
}
}
return(real_mu)
}
simulation_sigma <- function(n, K, dv) {
real_sigma <- matrix(dv, nrow = K, ncol = K)
return(real_sigma)
}
simulation_c <- function(n, K, alpha) {
c <- sample(1:K, size = n, replace = TRUE, prob = alpha)
return(c)
}
simulation_A <- function(n, mu, sigma, c) {
A <- matrix(0, nrow = n, ncol = n)
for (i in seq(1, n-1)) {
for (j in seq(i+1, n)) {
ith <- c[i]
jth <- c[j]
loc <- mu[ith, jth]
scale <- sqrt(sigma[ith, jth])
A[i, j] <- rnorm(1, mean = loc, sd = scale) + rnorm(1, mean = 0, sd = 0.1)
A[j, i] <- A[i, j]
}
}
return(A)
}
## 计算真实的成员矩阵
compute_Z <- function(n, K, c) {
Z <- matrix(0, nrow = n, ncol = K)
for (i in 1:n) {
Z[i, c[i]] <- 1
}
return(Z)
}
## 得到算法迭代前的初始参数initial_parameter
initial_alpha <- function(K) {
alpha <- rep(1 / K, K)
return(alpha)
}
initial_mu <- function(K) {
mu <- matrix(0, nrow = K, ncol = K)
return(mu)
}
initial_sigma <- function(K) {
sigma <- diag(K)
return(sigma)
}
initial_tau <- function(n, K) {
tau <- matrix(0, nrow = n, ncol = K)
for (i in 1:n) {
index <- sample(1:K, size = 1)
tau[i, index] <- 1
tau[i, ] <- tau[i, ] + 0.2
}
initial_tau <- t(apply(tau, 1, function(x) x / sum(x)))
return(initial_tau)
}
## 得到每次迭代后的参数
update_alpha <- function(K, tau) {
alpha <- colMeans(tau)
return(alpha)
}
update_mu <- function(n, K, tau, A) {
mu <- matrix(0, nrow = K, ncol = K)
for (k in 1:K) {
for (l in 1:K) {
sum_mu1 <- tau[, k] %*% t(tau[, l]) * A
sum_mu2 <- tau[, k] %*% t(tau[, l])
mu[k, l] <- (sum(sum_mu1) - sum(diag(sum_mu1))) / (sum(sum_mu2) - sum(diag(sum_mu2)))
}
}
return(mu)
}
update_sigma <- function(n, K, tau, A, mu) {
sigma <- matrix(0, nrow = K, ncol = K)
for (k in 1:K) {
for (l in 1:K) {
diff <- A - matrix(mu[k, l], nrow = n, ncol = n)
sum_sigma1 <- tau[, k] %*% t(tau[, l]) * diff^2
sum_sigma2 <- tau[, k] %*% t(tau[, l])
sigma[k, l] <- (sum(sum_sigma1) - sum(diag(sum_sigma1))) / (sum(sum_sigma2) - sum(diag(sum_sigma2)))
}
}
return(sigma)
}
update_tau <- function(n, K, dv, tau, A, alpha, mu, sigma) {
for (i in 1:n) {
ratio <- numeric(K)
mini_ratio <- numeric(K)
for (k in 1:K) {
temp <- 2 * pi * sigma[k, ]^(-0.5)
temp1 <- (A[i, ] - mu[k, ])^2 / (-2 * sigma[k, ])
temp <- temp * exp(temp1)
temp <- temp^tau
mini_temp <- temp^(1 / 100)
mini_alpha <- alpha^(1 / 100)
mini_ratio[k] <- mini_alpha[k] * prod(mini_temp)
}
mini_sum <- sum(mini_ratio)
ratio <- (mini_ratio / mini_sum)^100
tau[i, ] <- ratio / sum(ratio)
}
return(tau)
}
## 计算错误率
get_es_c <- function(n, tau) {
es_c <- max.col(tau)
return(es_c)
}
## 主体算法
## 生成数据的真实参数
main <- function(real, dm, dv) {
n <- 1000
K <- 4
c <- real$c
A <- real$A
alpha <- initial_alpha(K)
mu <- initial_mu(K)
sigma <- initial_sigma(K)
tau <- initial_tau(n, K)
for (w in 1:5) {
alpha <- update_alpha(K, tau)
mu <- update_mu(n, K, tau, A)
sigma <- update_sigma(n, K, tau, A, mu)
tau <- update_tau(n, K, dv, tau, A, alpha, mu, sigma)
}
es_c <- get_es_c(n, tau)
return(es_c)
}
real_ac <- function(dm, dv) {
set.seed(221)
n <- 1000
K <- 4
# 生成真实的 alpha, mu, sigma
real_alpha <- simulation_alpha(n, K)
real_mu <- simulation_mu(n, K, dm)
real_sigma <- simulation_sigma(n, K, dv)
c <- simulation_c(n, K, real_alpha)
A <- simulation_A(n, real_mu, real_sigma, c)
list(
alpha = real_alpha,
mu = real_mu,
sigma = real_sigma,
c = c,
A = A
)
}
library(Rcpp)
sourceCpp("D:/R-4.1.2/SA24204154/src/inst/error.cpp")
# 例子
c <- c(1, 1, 2, 2, 3, 1)
esc <- c(1, 1, 2, 3, 2, 3)
# 调用error函数并输出结果
result <- error(6, c, esc)
print(result)
real <- real_ac(0.5, 0.5)
c <- real$c
esc <- main(real, 0.5, 0.5)
error(1000, c, esc)
real_ac <- function(dm, dv) {
set.seed(221)
n <- 1000
K <- 4
real_alpha <- simulation_alpha(n, K)
real_mu <- simulation_mu(n, K, dm)
real_sigma <- simulation_sigma(n, K, dv)
c <- simulation_c(n, K, real_alpha)
A <- simulation_A(n, real_mu, real_sigma, c)
list(
alpha = real_alpha,
mu = real_mu,
sigma = real_sigma,
c = c,
A = A
)
}
main <- function(real) {
n <- 1000
K <- 4
c <- real$c
A <- real$A
alpha <- initial_alpha(K)
mu <- initial_mu(K)
sigma <- initial_sigma(K)
tau <- initial_tau(n, K)
for (w in 1:5) {
alpha <- update_alpha(K, tau)
mu <- update_mu(n, K, tau, A)
sigma <- update_sigma(n, K, tau, A, mu)
tau <- update_tau(n, K, dv, tau, A, alpha, mu, sigma)
}
es_c <- get_es_c(n, tau)
return(es_c)
}
real <- real_ac(0.5, 0.5)
c <- real$c
c
esc <- main(real)
error(1000, c, esc)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
rm(list = c("error", "main", "real_ac"))
devtools::document()
devtools::check()
devtools::check()
update_tau <- function(n, K, tau, A, alpha, mu, sigma) {
for (i in 1:n) {
ratio <- numeric(K)
mini_ratio <- numeric(K)
for (k in 1:K) {
temp <- 2 * pi * sigma[k, ]^(-0.5)
temp1 <- (A[i, ] - mu[k, ])^2 / (-2 * sigma[k, ])
temp <- temp * exp(temp1)
temp <- temp^tau
mini_temp <- temp^(1 / 100)
mini_alpha <- alpha^(1 / 100)
mini_ratio[k] <- mini_alpha[k] * prod(mini_temp)
}
mini_sum <- sum(mini_ratio)
ratio <- (mini_ratio / mini_sum)^100
tau[i, ] <- ratio / sum(ratio)
}
return(tau)
}
main <- function(real) {
n <- 1000
K <- 4
c <- real$c
A <- real$A
alpha <- initial_alpha(K)
mu <- initial_mu(K)
sigma <- initial_sigma(K)
tau <- initial_tau(n, K)
for (w in 1:5) {
alpha <- update_alpha(K, tau)
mu <- update_mu(n, K, tau, A)
sigma <- update_sigma(n, K, tau, A, mu)
tau <- update_tau(n, K, tau, A, alpha, mu, sigma)
}
es_c <- get_es_c(n, tau)
return(es_c)
}
devtools::check()
devtools::check()
devtools::check()
library(Rcpp)
cppFunction('double error(int n, IntegerVector c, IntegerVector es_c) {
int error1 = 0;
int error2 = 0;
for (int j = 0; j < n; j++) {
for (int i = 0; i < j; i++) {
if ((c[i] == c[j]) && (es_c[i] != es_c[j])) {
error1++;
}
if ((c[i] != c[j]) && (es_c[i] == es_c[j])) {
error2++;
}
}
}
return 2.0 * (error1 + error2) / (n * (n - 1));
}')
c <- c(1, 1, 2, 2, 3, 3)
esc <- c(1, 1, 2, 3, 2, 3)
result <- error(6, c, esc)
print(result)
library(stats)
library(MASS)
simulation_alpha <- function(n, K) {
real_alpha <- rep(1 / K, K)
return(real_alpha)
}
simulation_c <- function(n, K, alpha) {
c <- sample(1:K, size = n, replace = TRUE, prob = alpha)
return(c)
}
simulation_mu <- function(n, K, dm) {
real_mu <- matrix(0, nrow = K, ncol = K)
for (i in seq(1, K)) {
real_mu[i, i] <- runif(1, -dm, dm)
for (j in seq(i+1, K)) {
if (j < (K+1)){
real_mu[i, j] <- runif(1, -dm, dm)
real_mu[j, i] <- real_mu[i, j]
}
}
}
return(real_mu)
}
simulation_sigma <- function(n, K, dv) {
real_sigma <- matrix(dv, nrow = K, ncol = K)
return(real_sigma)
}
simulation_A <- function(n, mu, sigma, c) {
A <- matrix(0, nrow = n, ncol = n)
for (i in seq(1, n-1)) {
for (j in seq(i+1, n)) {
ith <- c[i]
jth <- c[j]
loc <- mu[ith, jth]
scale <- sqrt(sigma[ith, jth])
A[i, j] <- rnorm(1, mean = loc, sd = scale) + rnorm(1, mean = 0, sd = 0.1)
A[j, i] <- A[i, j]
}
}
return(A)
}
compute_Z <- function(n, K, c) {
Z <- matrix(0, nrow = n, ncol = K)
for (i in 1:n) {
Z[i, c[i]] <- 1
}
return(Z)
}
real_ac <- function(dm, dv) {
set.seed(221)
n <- 1000
K <- 4
real_alpha <- simulation_alpha(n, K)
real_mu <- simulation_mu(n, K, dm)
real_sigma <- simulation_sigma(n, K, dv)
c <- simulation_c(n, K, real_alpha)
A <- simulation_A(n, real_mu, real_sigma, c)
list(
alpha = real_alpha,
mu = real_mu,
sigma = real_sigma,
c = c,
A = A
)
}
real <- real_ac(0.5, 0.5)
head(real$c)
real <- real_ac(0.5, 0.5)
head(real$c)
head(real$A)
real <- real_ac(0.5, 0.5)
head(real$c)
initial_alpha <- function(K) {
alpha <- rep(1 / K, K)
return(alpha)
}
initial_mu <- function(K) {
mu <- matrix(0, nrow = K, ncol = K)
return(mu)
}
initial_sigma <- function(K) {
sigma <- diag(K)
return(sigma)
}
initial_tau <- function(n, K) {
tau <- matrix(0, nrow = n, ncol = K)
for (i in 1:n) {
index <- sample(1:K, size = 1)
tau[i, index] <- 1
tau[i, ] <- tau[i, ] + 0.2
}
initial_tau <- t(apply(tau, 1, function(x) x / sum(x)))
return(initial_tau)
}
## 每次迭代更新参数
update_alpha <- function(K, tau) {
alpha <- colMeans(tau)
return(alpha)
}
update_mu <- function(n, K, tau, A) {
mu <- matrix(0, nrow = K, ncol = K)
for (k in 1:K) {
for (l in 1:K) {
sum_mu1 <- tau[, k] %*% t(tau[, l]) * A
sum_mu2 <- tau[, k] %*% t(tau[, l])
mu[k, l] <- (sum(sum_mu1) - sum(diag(sum_mu1))) / (sum(sum_mu2) - sum(diag(sum_mu2)))
}
}
return(mu)
}
update_sigma <- function(n, K, tau, A, mu) {
sigma <- matrix(0, nrow = K, ncol = K)
for (k in 1:K) {
for (l in 1:K) {
diff <- A - matrix(mu[k, l], nrow = n, ncol = n)
sum_sigma1 <- tau[, k] %*% t(tau[, l]) * diff^2
sum_sigma2 <- tau[, k] %*% t(tau[, l])
sigma[k, l] <- (sum(sum_sigma1) - sum(diag(sum_sigma1))) / (sum(sum_sigma2) - sum(diag(sum_sigma2)))
}
}
return(sigma)
}
update_tau <- function(n, K, tau, A, alpha, mu, sigma) {
for (i in 1:n) {
ratio <- numeric(K)
mini_ratio <- numeric(K)
for (k in 1:K) {
temp <- 2 * pi * sigma[k, ]^(-0.5)
temp1 <- (A[i, ] - mu[k, ])^2 / (-2 * sigma[k, ])
temp <- temp * exp(temp1)
temp <- temp^tau
mini_temp <- temp^(1 / 100)
mini_alpha <- alpha^(1 / 100)
mini_ratio[k] <- mini_alpha[k] * prod(mini_temp)
}
mini_sum <- sum(mini_ratio)
ratio <- (mini_ratio / mini_sum)^100
tau[i, ] <- ratio / sum(ratio)
}
return(tau)
}
get_es_c <- function(n, tau) {
es_c <- max.col(tau)
return(es_c)
}
main <- function(real) {
n <- 1000
K <- 4
c <- real$c
A <- real$A
alpha <- initial_alpha(K)
mu <- initial_mu(K)
sigma <- initial_sigma(K)
tau <- initial_tau(n, K)
for (w in 1:5) {
alpha <- update_alpha(K, tau)
mu <- update_mu(n, K, tau, A)
sigma <- update_sigma(n, K, tau, A, mu)
tau <- update_tau(n, K, tau, A, alpha, mu, sigma)
}
es_c <- get_es_c(n, tau)
return(es_c)
}
c <- real$c
esc <- main(real)
error(1000, c, esc)
devtools::check()
devtools::check()
devtools::build_vignettes()
